/**
 * Coding as activism
 * TODO: Add Description
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CollectcanvassdataRequest', 'model/CreateavolunteerrecordRequest', 'model/HelloworldRequest', 'model/RSVPtoaneventRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CollectcanvassdataRequest'), require('../model/CreateavolunteerrecordRequest'), require('../model/HelloworldRequest'), require('../model/RSVPtoaneventRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.CodingAsActivism) {
      root.CodingAsActivism = {};
    }
    root.CodingAsActivism.MiscApi = factory(root.CodingAsActivism.ApiClient, root.CodingAsActivism.CollectcanvassdataRequest, root.CodingAsActivism.CreateavolunteerrecordRequest, root.CodingAsActivism.HelloworldRequest, root.CodingAsActivism.RSVPtoaneventRequest);
  }
}(this, function(ApiClient, CollectcanvassdataRequest, CreateavolunteerrecordRequest, HelloworldRequest, RSVPtoaneventRequest) {
  'use strict';

  /**
   * Misc service.
   * @module api/MiscApi
   * @version 1.0
   */

  /**
   * Constructs a new MiscApi. 
   * @alias module:api/MiscApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the echoesPost operation.
     * @callback module:api/MiscApi~echoesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hello world
     * 
     * @param {String} contentType 
     * @param {module:model/HelloworldRequest} body 
     * @param {module:api/MiscApi~echoesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.echoesPost = function(contentType, body, callback) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling echoesPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling echoesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/echoes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the events4306Get operation.
     * @callback module:api/MiscApi~events4306GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event details
     * 
     * @param {String} expand 
     * @param {String} authorization 
     * @param {module:api/MiscApi~events4306GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.events4306Get = function(expand, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'expand' is set
      if (expand === undefined || expand === null) {
        throw new Error("Missing the required parameter 'expand' when calling events4306Get");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling events4306Get");
      }


      var pathParams = {
      };
      var queryParams = {
        '$expand': expand,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/events/4306', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the people100879417CanvassResponsesPost operation.
     * @callback module:api/MiscApi~people100879417CanvassResponsesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collect canvass data
     * 
     * @param {String} contentType 
     * @param {String} authorization 
     * @param {module:model/CollectcanvassdataRequest} body 
     * @param {module:api/MiscApi~people100879417CanvassResponsesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.people100879417CanvassResponsesPost = function(contentType, authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling people100879417CanvassResponsesPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling people100879417CanvassResponsesPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling people100879417CanvassResponsesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/people/100879417/canvassResponses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the peopleFindOrCreatePost operation.
     * @callback module:api/MiscApi~peopleFindOrCreatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a volunteer record
     * 
     * @param {String} contentType 
     * @param {String} authorization 
     * @param {module:model/CreateavolunteerrecordRequest} body 
     * @param {module:api/MiscApi~peopleFindOrCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.peopleFindOrCreatePost = function(contentType, authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling peopleFindOrCreatePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling peopleFindOrCreatePost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling peopleFindOrCreatePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/people/findOrCreate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the signupsPost operation.
     * @callback module:api/MiscApi~signupsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RSVP to an event
     * 
     * @param {String} contentType 
     * @param {String} authorization 
     * @param {module:model/RSVPtoaneventRequest} body 
     * @param {module:api/MiscApi~signupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.signupsPost = function(contentType, authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling signupsPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling signupsPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signupsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/signups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
